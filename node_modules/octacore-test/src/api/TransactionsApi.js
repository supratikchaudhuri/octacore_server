/*
 * Octacore
 * Welcome to the API documentation for our blockchain data service! Our service allows users to access and query data from various blockchain networks through a set of easy-to-use API endpoints. Whether you're looking for transaction history, block information, or on-chain analytics, our API has you covered. With our API, you can retrieve data from a variety of popular blockchain networks, including ethereum and polygon mainnets . Simply make a request to the appropriate endpoint with the necessary parameters, and you'll receive a response with the requested data in a convenient JSON format. We strive to make our API as user-friendly and reliable as possible, and are constantly working to expand our coverage and capabilities. If you have any questions or need assistance getting started, please don't hesitate to reach out to us. We hope that our API will be a valuable resource for your blockchain projects.
 *
 * OpenAPI spec version: 1.0
 * Contact: contact@octacore.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.31
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ModelsBlockNumberIndex', 'model/ModelsHash', 'model/ModelsHashIndex'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ModelsBlockNumberIndex'), require('../model/ModelsHash'), require('../model/ModelsHashIndex'));
  } else {
    // Browser globals (root is window)
    if (!root.Octacore) {
      root.Octacore = {};
    }
    root.Octacore.TransactionsApi = factory(root.Octacore.ApiClient, root.Octacore.ModelsBlockNumberIndex, root.Octacore.ModelsHash, root.Octacore.ModelsHashIndex);
  }
}(this, function(ApiClient, ModelsBlockNumberIndex, ModelsHash, ModelsHashIndex) {
  'use strict';

  /**
   * Transactions service.
   * @module api/TransactionsApi
   * @version 1.0
   */

  /**
   * Constructs a new TransactionsApi. 
   * @alias module:api/TransactionsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getTransactionByBlockHashAndIndexPost operation.
     * @callback module:api/TransactionsApi~getTransactionByBlockHashAndIndexPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getTransactionByBlockHashAndIndex
     * The /getTransactionByBlockHashAndIndex API endpoint allows you to retrieve a specific transaction from the Ethereum blockchain by providing the block hash and the index of the transaction within the block. ### Use cases: + Displaying transaction information on a blockchain explorer. + Building applications that rely on transaction information, such as auditing tools or payment processing systems.
     * @param {module:model/ModelsHashIndex} input Block Hash And Index
     * @param {module:api/TransactionsApi~getTransactionByBlockHashAndIndexPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getTransactionByBlockHashAndIndex = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling getTransactionByBlockHashAndIndexPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/getTransactionByBlockHashAndIndex', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransactionByBlockNumberAndIndexPost operation.
     * @callback module:api/TransactionsApi~getTransactionByBlockNumberAndIndexPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getTransactionByBlockNumberAndIndex
     * The /getTransactionByBlockNumberAndIndex API endpoint allows you to retrieve a specific transaction across various chains by providing the block number and the index of the transaction within the block. ### Use cases: + Displaying transaction information on a blockchain explorer. + Building applications that rely on transaction information, such as auditing tools or payment processing systems.
     * @param {module:model/ModelsBlockNumberIndex} input Block Number And Index
     * @param {module:api/TransactionsApi~getTransactionByBlockNumberAndIndexPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getTransactionByBlockNumberAndIndex = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling getTransactionByBlockNumberAndIndexPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/getTransactionByBlockNumberAndIndex', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransactionDataByHashPost operation.
     * @callback module:api/TransactionsApi~getTransactionDataByHashPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getTransactionDataByHash
     * The /getTransactionDataByHash API endpoint allows you to retrieve detailed information about all transaction in a block on the specified blockchain by providing the block hash. ### Use cases: + Displaying transaction information on a blockchain explorer. + Allowing a user to view the details of a specific transaction within a decentralized application. + Building applications that rely on transaction information, such as auditing tools or payment processing systems.
     * @param {module:model/ModelsHash} input Address
     * @param {module:api/TransactionsApi~getTransactionDataByHashPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getTransactionDataByHash = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling getTransactionDataByHashPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/getTransactionDataByHash', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
