/*
 * Octacore
 * Welcome to the API documentation for our blockchain data service! Our service allows users to access and query data from various blockchain networks through a set of easy-to-use API endpoints. Whether you're looking for transaction history, block information, or on-chain analytics, our API has you covered. With our API, you can retrieve data from a variety of popular blockchain networks, including ethereum and polygon mainnets . Simply make a request to the appropriate endpoint with the necessary parameters, and you'll receive a response with the requested data in a convenient JSON format. We strive to make our API as user-friendly and reliable as possible, and are constantly working to expand our coverage and capabilities. If you have any questions or need assistance getting started, please don't hesitate to reach out to us. We hope that our API will be a valuable resource for your blockchain projects.
 *
 * OpenAPI spec version: 1.0
 * Contact: contact@octacore.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.31
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Octacore);
  }
}(this, function(expect, Octacore) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Octacore.NFTApi();
  });

  describe('(package)', function() {
    describe('NFTApi', function() {
      describe('getNFTByIdPost', function() {
        it('should call getNFTByIdPost successfully', function(done) {
          // TODO: uncomment, update parameter values for getNFTByIdPost call
          /*
          var input = new Octacore.ModelsGetNFTRequestBody();
          input.chains = [""];
          input.contractAddress = "";
          input.tokenId = "";

          instance.getNFTByIdPost(input, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNFTMetadataPost', function() {
        it('should call getNFTMetadataPost successfully', function(done) {
          // TODO: uncomment, update parameter values for getNFTMetadataPost call
          /*
          var input = new Octacore.ModelsContractAdressRequestBody();
          input.chains = [""];
          input.contractAddress = "";

          instance.getNFTMetadataPost(input, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNFTOwnerPost', function() {
        it('should call getNFTOwnerPost successfully', function(done) {
          // TODO: uncomment, update parameter values for getNFTOwnerPost call
          /*
          var input = new Octacore.ModelsGetNFTRequestBody();
          input.chains = [""];
          input.contractAddress = "";
          input.tokenId = "";

          instance.getNFTOwnerPost(input, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNFTsForCollectionPost', function() {
        it('should call getNFTsForCollectionPost successfully', function(done) {
          // TODO: uncomment, update parameter values for getNFTsForCollectionPost call
          /*
          var input = new Octacore.ModelsAddressReq();
          input.address = "";
          input.chains = [""];

          instance.getNFTsForCollectionPost(input, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTokenMetadataPost', function() {
        it('should call getTokenMetadataPost successfully', function(done) {
          // TODO: uncomment, update parameter values for getTokenMetadataPost call
          /*
          var input = new Octacore.ModelsContractAdressRequestBody();
          input.chains = [""];
          input.contractAddress = "";

          instance.getTokenMetadataPost(input, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('isOwnerInCollectionPost', function() {
        it('should call isOwnerInCollectionPost successfully', function(done) {
          // TODO: uncomment, update parameter values for isOwnerInCollectionPost call
          /*
          var input = new Octacore.ModelsIsOwnerInCollectionRequestBody();
          input.accountAddress = "";
          input.chains = [""];
          input.contractAddress = "";
          input.tokenId = "";

          instance.isOwnerInCollectionPost(input, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
