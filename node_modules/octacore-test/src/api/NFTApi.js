/*
 * Octacore
 * Welcome to the API documentation for our blockchain data service! Our service allows users to access and query data from various blockchain networks through a set of easy-to-use API endpoints. Whether you're looking for transaction history, block information, or on-chain analytics, our API has you covered. With our API, you can retrieve data from a variety of popular blockchain networks, including ethereum and polygon mainnets . Simply make a request to the appropriate endpoint with the necessary parameters, and you'll receive a response with the requested data in a convenient JSON format. We strive to make our API as user-friendly and reliable as possible, and are constantly working to expand our coverage and capabilities. If you have any questions or need assistance getting started, please don't hesitate to reach out to us. We hope that our API will be a valuable resource for your blockchain projects.
 *
 * OpenAPI spec version: 1.0
 * Contact: contact@octacore.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.31
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ModelsAddressReq', 'model/ModelsContractAdressRequestBody', 'model/ModelsGetNFTRequestBody', 'model/ModelsIsOwnerInCollectionRequestBody'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ModelsAddressReq'), require('../model/ModelsContractAdressRequestBody'), require('../model/ModelsGetNFTRequestBody'), require('../model/ModelsIsOwnerInCollectionRequestBody'));
  } else {
    // Browser globals (root is window)
    if (!root.Octacore) {
      root.Octacore = {};
    }
    root.Octacore.NFTApi = factory(root.Octacore.ApiClient, root.Octacore.ModelsAddressReq, root.Octacore.ModelsContractAdressRequestBody, root.Octacore.ModelsGetNFTRequestBody, root.Octacore.ModelsIsOwnerInCollectionRequestBody);
  }
}(this, function(ApiClient, ModelsAddressReq, ModelsContractAdressRequestBody, ModelsGetNFTRequestBody, ModelsIsOwnerInCollectionRequestBody) {
  'use strict';

  /**
   * NFT service.
   * @module api/NFTApi
   * @version 1.0
   */

  /**
   * Constructs a new NFTApi. 
   * @alias module:api/NFTApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getNFTByIdPost operation.
     * @callback module:api/NFTApi~getNFTByIdPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getNFTById
     * The /getNFTById API endpoint allows you to retrieve metadata about a specific non-fungible token (NFT) on the Ethereum blockchain. Non-fungible tokens are unique digital assets that cannot be replaced or exchanged on a 1:1 basis, such as collectible items or in-game items. They are typically implemented using the ERC-721 standard. ### Use cases: + Displaying NFT metadata on a blockchain explorer. + Allowing a user to view NFT metadata within a decentralized application. + Building NFT marketplaces or other applications that rely on NFT metadata.
     * @param {module:model/ModelsGetNFTRequestBody} input Contract Address
     * @param {module:api/NFTApi~getNFTByIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getNFTById = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling getNFTByIdPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/getNFTById', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNFTMetadataPost operation.
     * @callback module:api/NFTApi~getNFTMetadataPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getNFTMetadata
     * The /getNFTMetadata API endpoint allows you to retrieve metadata about a specific non-fungible token (NFT) contract on the Ethereum blockchain. Non-fungible tokens are unique digital assets that cannot be replaced or exchanged on a 1:1 basis, such as collectible items or in-game items. They are typically implemented using the ERC-721 or ERC-1155 standards. ### Use cases: + Displaying NFT metadata on a blockchain explorer. + Verifying the authenticity of an NFT: By retrieving the metadata for an NFT contract, you can verify that it is the genuine contract for a particular NFT and not a fake or copied contract. + Researching NFT projects: If you are interested in learning more about different NFT projects, you can use the /getNFTMetadata endpoint to retrieve information about the NFT contract and get a better understanding of the project's goals and features. + Building NFT utilities: You can build tools or applications that use the /getNFTMetadata endpoint to provide users with useful information about NFT contracts, such as the total supply or the symbol. For example, you might build a portfolio tracker that helps users track their holdings of different NFTs, or you might build a price oracle that retrieves NFT metadata in order to provide real-time price information for different NFTs.
     * @param {module:model/ModelsContractAdressRequestBody} input Contract Address
     * @param {module:api/NFTApi~getNFTMetadataPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getNFTMetadata = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling getNFTMetadataPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/getNFTMetadata', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNFTOwnerPost operation.
     * @callback module:api/NFTApi~getNFTOwnerPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getNFTOwner
     * This endpoint takes a erc721 token address and token id as input and returns the owner Address for the NFT. The /getNFTOwner API endpoint allows you to retrieve the owner of a specific non-fungible token (NFT) on the Ethereum blockchain. Non-fungible tokens are unique digital assets that cannot be replaced or exchanged on a 1:1 basis, such as collectible items or in-game items. They are typically implemented using the ERC-721 standard. ### Use cases: + Displaying NFT ownership information on a blockchain explorer. + Allowing a user to view the owner of an NFT within a decentralized application. + Building NFT marketplaces or other applications that rely on NFT ownership information.
     * @param {module:model/ModelsGetNFTRequestBody} input Contract Address
     * @param {module:api/NFTApi~getNFTOwnerPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getNFTOwner = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling getNFTOwnerPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/getNFTOwner', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNFTsForCollectionPost operation.
     * @callback module:api/NFTApi~getNFTsForCollectionPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getNFTsForCollection
     * The /getNFTsForCollection API endpoint allows you to retrieve the list of non-fungible token (NFT) IDs that are associated with a specific NFT contract on the Ethereum blockchain. Non-fungible tokens are unique digital assets that cannot be replaced or exchanged on a 1:1 basis, such as collectible items or in-game items. They are typically implemented using the ERC-721 standard. ### Use cases: + Displaying a list of NFTs on a blockchain explorer. + Building NFT marketplaces: You can use the /getNFTsForCollection endpoint to build an NFT marketplace or exchange that allows users to browse and trade NFTs from a specific contract. + Creating NFT inventories: If you are building a decentralized application that involves the use of NFTs, you can use the /getNFTsForCollection endpoint to create an inventory of NFTs that are owned by a particular user or contract.
     * @param {module:model/ModelsAddressReq} input Contract Address
     * @param {module:api/NFTApi~getNFTsForCollectionPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getNFTsForCollection = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling getNFTsForCollectionPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/getNFTsForCollection', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTokenMetadataPost operation.
     * @callback module:api/NFTApi~getTokenMetadataPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getTokenMetadata
     * This endpoint takes a erc20 token address as input and returns the metadata for the token The /getTokenMetadata API endpoint allows you to retrieve metadata about a specific ERC-20 token contract on the Ethereum blockchain. ERC-20 tokens are digital assets that are built on top of the Ethereum platform and follow a set of standard rules, making them easy to use and integrate with other applications. ### Use cases: + Displaying token metadata on a blockchain explorer. + Building token marketplaces or other applications that rely on token metadata. The response includes various metadata fields for the token contract, such as the name, symbol, number of decimals, and total supply. The specific fields that are included in the response may vary depending on how the token contract is implemented.
     * @param {module:model/ModelsContractAdressRequestBody} input Contract Address
     * @param {module:api/NFTApi~getTokenMetadataPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getTokenMetadata = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling getTokenMetadataPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/getTokenMetadata', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the isOwnerInCollectionPost operation.
     * @callback module:api/NFTApi~isOwnerInCollectionPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * isOwnerInCollection
     * This endpoint takes a erc721/erc1155 token address, a account address as input and returns if the account address owns an NFT in the collection. For erc1155 also provide tokenID The /isCollectionOwner API endpoint allows you to check if a specific Ethereum address owns at least one non-fungible token (NFT) in a particular NFT contract. Non-fungible tokens are unique digital assets that cannot be replaced or exchanged on a 1:1 basis, such as collectible items or in-game items. They are typically implemented using the ERC-721 or ERC-1155 standards. ### Use cases: + Verifying NFT ownership within a decentralized application. + Building NFT marketplaces or other applications that rely on NFT ownership information.
     * @param {module:model/ModelsIsOwnerInCollectionRequestBody} input Contract Address
     * @param {module:api/NFTApi~isOwnerInCollectionPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.isOwnerInCollection = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling isOwnerInCollectionPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/isOwnerInCollection', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
