/*
 * Octacore
 * Welcome to the API documentation for our blockchain data service! Our service allows users to access and query data from various blockchain networks through a set of easy-to-use API endpoints. Whether you're looking for transaction history, block information, or on-chain analytics, our API has you covered. With our API, you can retrieve data from a variety of popular blockchain networks, including ethereum and polygon mainnets . Simply make a request to the appropriate endpoint with the necessary parameters, and you'll receive a response with the requested data in a convenient JSON format. We strive to make our API as user-friendly and reliable as possible, and are constantly working to expand our coverage and capabilities. If you have any questions or need assistance getting started, please don't hesitate to reach out to us. We hope that our API will be a valuable resource for your blockchain projects.
 *
 * OpenAPI spec version: 1.0
 * Contact: contact@octacore.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.31
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ModelsAddressBalanceReq', 'model/ModelsAddressReq', 'model/ModelsGetSpenderAllowanceRequestBody'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ModelsAddressBalanceReq'), require('../model/ModelsAddressReq'), require('../model/ModelsGetSpenderAllowanceRequestBody'));
  } else {
    // Browser globals (root is window)
    if (!root.Octacore) {
      root.Octacore = {};
    }
    root.Octacore.AccountsApi = factory(root.Octacore.ApiClient, root.Octacore.ModelsAddressBalanceReq, root.Octacore.ModelsAddressReq, root.Octacore.ModelsGetSpenderAllowanceRequestBody);
  }
}(this, function(ApiClient, ModelsAddressBalanceReq, ModelsAddressReq, ModelsGetSpenderAllowanceRequestBody) {
  'use strict';

  /**
   * Accounts service.
   * @module api/AccountsApi
   * @version 1.0
   */

  /**
   * Constructs a new AccountsApi. 
   * @alias module:api/AccountsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getAllAssetsByAddressPost operation.
     * @callback module:api/AccountsApi~getAllAssetsByAddressPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAllAssetsByAddress
     * Get all assets owned by a given address. The /getAllAssetsByAddress API endpoint allows you to retrieve a list of all assets owned by a given blockchain address. ###  Use cases: + Displaying a user's asset portfolio on a wallet or exchange platform. + Allowing a user to view and manage their assets within a decentralized application.
     * @param {module:model/ModelsAddressReq} input Account Address
     * @param {module:api/AccountsApi~getAllAssetsByAddressPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getAllAssetsByAddress = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling getAllAssetsByAddressPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/getAllAssetsByAddress', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBalanceMultiPost operation.
     * @callback module:api/AccountsApi~getBalanceMultiPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getBalanceMulti
     * The /getBalanceMulti is a function that allows developers to retrieve the balances of a multiple blockchain addresses on any particular blockchain . The balance refers to the amount of native cryptocurrency/token that is held in that address. This information can be used for a variety of purposes, including: ###  Use cases: + Displaying the balances of multiple addresses on a wallet or exchange platform. + Allowing a user to view the balances of multiple addresses within a decentralized application.
     * @param {module:model/ModelsAddressBalanceReq} input User Addresses(comma-seperated)
     * @param {module:api/AccountsApi~getBalanceMultiPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getBalanceMulti = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling getBalanceMultiPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/getBalanceMulti', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBalancePost operation.
     * @callback module:api/AccountsApi~getBalancePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getBalance
     * The /getBalance API endpoint is a function that allows developers to retrieve the balance of a specific blockchain address on any particular blockchain . The balance refers to the amount of native cryptocurrency/token that is held in that address. This information can be used for a variety of purposes, including: ###  Use cases: + Displaying a user's balance on a wallet or exchange platform: This is a common use case for this type of API. + Wallet and exchange platforms can use the /getBalance endpoint to retrieve the balance of a user's address and display it on their platform, allowing the user to see how much of a particular cryptocurrency they own. + Allowing a user to view their balance within a decentralized application (dApp): dApps can also use the /getBalance endpoint to retrieve the balance of a user's address and display it within the dApp, allowing the user to see how much of a particular cryptocurrency they own and can use within the dApp. + Analysing and tracking the flow of cryptocurrency: The /getBalance API endpoint can also be used by developers to track the flow of cryptocurrency between different addresses, this could be useful for tracking the balance of an address for a given cryptocurrency over time, or for identifying large transactions or changes in balance. + Auditing and compliance: The /getBalance API endpoint can also be used by auditing and compliance teams to check the balance of an address at a given time, this is useful for compliance with regulations and preventing illegal activities.
     * @param {module:model/ModelsAddressBalanceReq} input User Address
     * @param {module:api/AccountsApi~getBalancePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getBalance = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling getBalancePost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/getBalance', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getERC1155AssetsByAddressPost operation.
     * @callback module:api/AccountsApi~getERC1155AssetsByAddressPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getERC1155AssetsByAddress
     * Returns all ERC1155 assets of a account The /getERC1155AssetsByAddress API endpoint allows you to retrieve a list of all ERC1155 assets owned by a given blockchain address. ERC1155 assets are a type of digital asset that are built on EVM-compatible platforms and adhere to a specific set of standards, allowing them to be easily traded on Ethereum and other compatible platforms. Unlike ERC20 and ERC721 assets, which are either fungible (interchangeable) or non-fungible (unique), ERC1155 assets can be both fungible and non-fungible within the same contract. ###  Use cases: + Displaying a user's ERC1155 asset portfolio on a wallet or exchange platform. + Allowing a user to view and manage their ERC1155 assets within a decentralized application.
     * @param {module:model/ModelsAddressReq} input Account Address
     * @param {module:api/AccountsApi~getERC1155AssetsByAddressPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getERC1155AssetsByAddress = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling getERC1155AssetsByAddressPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/getERC1155AssetsByAddress', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getERC20AssetsByAddressPost operation.
     * @callback module:api/AccountsApi~getERC20AssetsByAddressPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getERC20AssetsByAddress
     * Returns all ERC20 assets of a account The /getERC20AssetsByAddress API endpoint allows you to retrieve a list of all ERC20 assets owned by a given blockchain address. ERC-20 tokens are a standardized form of digital asset that are built on top of the Ethereum Virtual Machine (EVM) platform, following a set of rules and standards outlined in the ERC-20 specification. These tokens can represent any kind of asset, such as a currency, a commodity, a utility, or a non-fungible asset, and can be easily traded on Ethereum and other compatible platforms. Because ERC-20 tokens follow a well-defined set of standards, they are widely accepted and widely supported by a variety of decentralized applications and exchanges, making them an easy and convenient choice for developers and users alike. ###  Use cases: + Displaying a user's ERC20 asset portfolio on a wallet or exchange platform. + Allowing a user to view and manage their ERC20 assets within a decentralized application.
     * @param {module:model/ModelsAddressReq} input Account Address
     * @param {module:api/AccountsApi~getERC20AssetsByAddressPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getERC20AssetsByAddress = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling getERC20AssetsByAddressPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/getERC20AssetsByAddress', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getERC721AssetsByAddressPost operation.
     * @callback module:api/AccountsApi~getERC721AssetsByAddressPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getERC721AssetsByAddress
     * Returns all ERC721 assets of a account The /getERC721AssetsByAddress API endpoint allows you to retrieve a list of all ERC721 assets owned by a given blockchain address. ERC721 assets are a type of non-fungible token (NFT) that are built on EVM compatible platform and adhere to a specific set of standards, allowing them to be easily traded on Ethereum and other compatible platforms. ###  Use cases: + Displaying a user's ERC721 asset portfolio on a wallet or exchange platform. + Allowing a user to view and manage their ERC721 assets within a decentralized application.
     * @param {module:model/ModelsAddressReq} input Account Address
     * @param {module:api/AccountsApi~getERC721AssetsByAddressPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getERC721AssetsByAddress = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling getERC721AssetsByAddressPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/getERC721AssetsByAddress', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNFTAssetsByAddressPost operation.
     * @callback module:api/AccountsApi~getNFTAssetsByAddressPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getNFTAssetsByAddress
     * Returns all Nfts of a accountAddress. The /getNFTAssetsByAddress API endpoint allows you to retrieve a list of all non-fungible tokens (NFTs) owned by a given blockchain address. NFTs are a type of digital asset that are built on a blockchain platform and represent a unique item or asset, such as a piece of art, a collectible, or a virtual real estate property. ###  Use cases: + Displaying a user's NFT asset portfolio on a wallet or exchange platform. + Allowing a user to view and manage their NFT assets within a decentralized application.
     * @param {module:model/ModelsAddressReq} input Account Address
     * @param {module:api/AccountsApi~getNFTAssetsByAddressPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getNFTAssetsByAddress = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling getNFTAssetsByAddressPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/getNFTAssetsByAddress', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPendingBalanceAtPost operation.
     * @callback module:api/AccountsApi~getPendingBalanceAtPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getPendingBalanceAt
     * Returns the wei balance of the given account in the pending state. /n The /getPendingBalanceAt API endpoint allows you to retrieve the balance of a given blockchain address in the \"pending\" state, which means that the balance is in the process of being updated as part of a transaction that has not yet been included in a block. ###  Use cases: + Displaying a user's pending balance on a wallet or exchange platform. + Allowing a user to view their pending balance within a decentralized application.
     * @param {module:model/ModelsAddressReq} input Account Address
     * @param {module:api/AccountsApi~getPendingBalanceAtPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getPendingBalanceAt = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling getPendingBalanceAtPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/getPendingBalanceAt', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSpenderAllowancePost operation.
     * @callback module:api/AccountsApi~getSpenderAllowancePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getSpenderAllowance
     * The /getSpenderAllowance API endpoint allows you to retrieve the allowance of a given spender for a specific ERC20 token, as set by the owner of the token. The allowance is the maximum amount of the ERC20 token that the spender is authorized to transfer on behalf of the owner. ###  Use cases: + Displaying a user's allowance for a specific ERC20 token on a wallet or exchange platform. + Allowing a user to view their allowance for a specific ERC20 token within a decentralized application.
     * @param {module:model/ModelsGetSpenderAllowanceRequestBody} input addresses
     * @param {module:api/AccountsApi~getSpenderAllowancePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getSpenderAllowance = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling getSpenderAllowancePost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/getSpenderAllowance', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the isAddressValidPost operation.
     * @callback module:api/AccountsApi~isAddressValidPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * isAddressValid
     * The /isAddressValid API endpoint allows you to verify if a given address is a valid address on the blockchain. This can be useful for checking if an address has been correctly formatted and belongs to an existing account. ###  Use cases: + Validating user-provided addresses on a wallet or exchange platform. + Allowing a user to verify the correctness of an address within a decentralized application.
     * @param {module:model/ModelsAddressReq} input Address
     * @param {module:api/AccountsApi~isAddressValidPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.isAddressValid = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling isAddressValidPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/isAddressValid', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
