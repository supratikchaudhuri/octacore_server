/*
 * Octacore
 * Welcome to the API documentation for our blockchain data service! Our service allows users to access and query data from various blockchain networks through a set of easy-to-use API endpoints. Whether you're looking for transaction history, block information, or on-chain analytics, our API has you covered. With our API, you can retrieve data from a variety of popular blockchain networks, including ethereum and polygon mainnets . Simply make a request to the appropriate endpoint with the necessary parameters, and you'll receive a response with the requested data in a convenient JSON format. We strive to make our API as user-friendly and reliable as possible, and are constantly working to expand our coverage and capabilities. If you have any questions or need assistance getting started, please don't hesitate to reach out to us. We hope that our API will be a valuable resource for your blockchain projects.
 *
 * OpenAPI spec version: 1.0
 * Contact: contact@octacore.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.31
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ModelsBlockNumber', 'model/ModelsChains', 'model/ModelsHash'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ModelsBlockNumber'), require('../model/ModelsChains'), require('../model/ModelsHash'));
  } else {
    // Browser globals (root is window)
    if (!root.Octacore) {
      root.Octacore = {};
    }
    root.Octacore.BlocksApi = factory(root.Octacore.ApiClient, root.Octacore.ModelsBlockNumber, root.Octacore.ModelsChains, root.Octacore.ModelsHash);
  }
}(this, function(ApiClient, ModelsBlockNumber, ModelsChains, ModelsHash) {
  'use strict';

  /**
   * Blocks service.
   * @module api/BlocksApi
   * @version 1.0
   */

  /**
   * Constructs a new BlocksApi. 
   * @alias module:api/BlocksApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getAllTransactionsByBlockHashPost operation.
     * @callback module:api/BlocksApi~getAllTransactionsByBlockHashPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAllTransactionsByBlockHash
     * The /getAllTransactionsByBlockHash API endpoint allows you to retrieve all transactions included in a specific block on the blockchain, based on the block's hash. A block hash is a unique identifier that is generated for each block, and can be used to look up the block and its contents on the blockchain. ### Use cases: + Displaying the transactions of a specific block on a blockchain explorer. + Allowing a user to view the transactions included in a specific block within a decentralized application.
     * @param {module:model/ModelsHash} input Block Hash
     * @param {module:api/BlocksApi~getAllTransactionsByBlockHashPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getAllTransactionsByBlockHash = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling getAllTransactionsByBlockHashPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/getAllTransactionsByBlockHash', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllTransactionsByBlockNumberPost operation.
     * @callback module:api/BlocksApi~getAllTransactionsByBlockNumberPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAllTransactionsByBlockNumber
     * Returns all transactions of the block from the network based on the provided block number. The /getAllTransactionsByBlockNumber API endpoint allows you to retrieve all transactions included in a specific block on the blockchain, based on the block's number. The block number is the sequential index of a block within the blockchain, starting from 0 for the genesis block. ### Use cases: + Displaying the transactions of a specific block on a blockchain explorer. + Allowing a user to view the transactions included in a specific block within a decentralized application.
     * @param {module:model/ModelsBlockNumber} input Block Number
     * @param {module:api/BlocksApi~getAllTransactionsByBlockNumberPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getAllTransactionsByBlockNumber = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling getAllTransactionsByBlockNumberPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/getAllTransactionsByBlockNumber', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBlockDataByHashPost operation.
     * @callback module:api/BlocksApi~getBlockDataByHashPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getBlockDataByHash
     * Returns the block from the network based on the provided hash. The /getBlockDataByHash API endpoint allows you to retrieve the data of a specific block on the blockchain, based on the block's hash. A block hash is a unique identifier that is generated for each block, and can be used to look up the block and its contents on the blockchain. ### Use cases: + Displaying the data of a specific block on a blockchain explorer.
     * @param {module:model/ModelsHash} input Block Hash
     * @param {module:api/BlocksApi~getBlockDataByHashPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getBlockDataByHash = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling getBlockDataByHashPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/getBlockDataByHash', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBlockDataByNumberPost operation.
     * @callback module:api/BlocksApi~getBlockDataByNumberPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getBlockDataByNumber
     * Returns the block from the network based on the provided block number. The /getBlockDataByHash API endpoint allows you to retrieve the data of a specific block on the blockchain, based on the block's number. ### Use cases: + Displaying the data of a specific block on a blockchain explorer.
     * @param {module:model/ModelsBlockNumber} input Block Number
     * @param {module:api/BlocksApi~getBlockDataByNumberPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getBlockDataByNumber = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling getBlockDataByNumberPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/getBlockDataByNumber', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBlockHeaderByHashPost operation.
     * @callback module:api/BlocksApi~getBlockHeaderByHashPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the block header.
     * Returns the block header. This endpoint takes block hash as input. The /getBlockHeaderByHash API endpoint allows you to retrieve the header of a specific block on the blockchain, based on the block's hash. The block header contains basic information about the block, such as its number, timestamp, and the hash of the previous block. ### Use cases: + Displaying the header of a specific block on a blockchain explorer. + Allowing a user to view the header of a specific block within a decentralized application.
     * @param {module:model/ModelsHash} input Block Hash
     * @param {module:api/BlocksApi~getBlockHeaderByHashPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getBlockHeaderByHash = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling getBlockHeaderByHashPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/getBlockHeaderByHash', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBlockHeaderByNumberPost operation.
     * @callback module:api/BlocksApi~getBlockHeaderByNumberPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getBlockHeaderByNumber
     * Returns the block from the network based on the provided block number. The /getBlockDataByHash API endpoint allows you to retrieve the data of a specific block on the blockchain, based on the block's number. ### Use cases: + Displaying the data of a specific block on a blockchain explorer.
     * @param {module:model/ModelsBlockNumber} input Block Hash
     * @param {module:api/BlocksApi~getBlockHeaderByNumberPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getBlockHeaderByNumber = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling getBlockHeaderByNumberPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/getBlockHeaderByNumber', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

     /**
     * Callback function to receive the result of the getLatestBlockNumberPost operation.
     * @callback module:api/BlocksApi~getLatestBlockNumberPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getLatestBlockNumber
     * Returns the latest block number from ethereum chain. The /getLatestEthBlockNumber API endpoint allows you to retrieve the number of the most recent block on the Ethereum blockchain. The block number is the sequential index of a block within the blockchain, starting from 0 for the genesis block. ### Use cases: + Displaying the latest block number on a blockchain explorer. + Allowing a user to stay up-to-date with the latest block within a decentralized application.
     * @param {module:model/ModelsChains} input List of chains
     * @param {module:api/BlocksApi~getLatestBlockNumberPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
     this.getLatestBlockNumber = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling getLatestBlockNumberPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/getLatestBlockNumber', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransactionCountByBlockHashPost operation.
     * @callback module:api/BlocksApi~getTransactionCountByBlockHashPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getTransactionCountByBlockHash
     * Returns the number of transactions in a block. This endpoint takes the block hash as input. The /getTransactionCountByBlockHash API endpoint allows you to retrieve the number of transactions included in a specific block on the blockchain, based on the block's hash. A block hash is a unique identifier that is generated for each block, and can be used to look up the block and its contents on the blockchain. ### Use cases: + Displaying the number of transactions in a specific block on a blockchain explorer. + Allowing a user to view the number of transactions included in a specific block within a decentralized application.
     * @param {module:model/ModelsHash} input Block Hash
     * @param {module:api/BlocksApi~getTransactionCountByBlockHashPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getTransactionCountByBlockHash = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling getTransactionCountByBlockHashPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/getTransactionCountByBlockHash', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
