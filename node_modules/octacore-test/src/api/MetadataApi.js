/*
 * Octacore
 * Welcome to the API documentation for our blockchain data service! Our service allows users to access and query data from various blockchain networks through a set of easy-to-use API endpoints. Whether you're looking for transaction history, block information, or on-chain analytics, our API has you covered. With our API, you can retrieve data from a variety of popular blockchain networks, including ethereum and polygon mainnets . Simply make a request to the appropriate endpoint with the necessary parameters, and you'll receive a response with the requested data in a convenient JSON format. We strive to make our API as user-friendly and reliable as possible, and are constantly working to expand our coverage and capabilities. If you have any questions or need assistance getting started, please don't hesitate to reach out to us. We hope that our API will be a valuable resource for your blockchain projects.
 *
 * OpenAPI spec version: 1.0
 * Contact: contact@octacore.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.31
 *
 * Do not edit the class manually.
 *
 */


(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ModelsAddressReq', 'model/ModelsChains', 'model/ModelsGetStorageAtReq', 'model/ModelsNonceReq'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ModelsAddressReq'), require('../model/ModelsChains'), require('../model/ModelsGetStorageAtReq'), require('../model/ModelsNonceReq'));
  } else {
    // Browser globals (root is window)
    if (!root.Octacore) {
      root.Octacore = {};
    }
    root.Octacore.MetadataApi = factory(root.Octacore.ApiClient, root.Octacore.ModelsAddressReq, root.Octacore.ModelsChains, root.Octacore.ModelsGetStorageAtReq, root.Octacore.ModelsNonceReq);
  }
}(this, function(ApiClient, ModelsAddressReq, ModelsChains, ModelsGetStorageAtReq, ModelsNonceReq) {
  'use strict';


  /**
   * Metadata service.
   * @module api/MetadataApi
   * @version 1.0
   */

  /**
   * Constructs a new MetadataApi. 
   * @alias module:api/MetadataApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getCodeAtPost operation.
     * @callback module:api/MetadataApi~getCodeAtPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getCodeAt
     * The /getCodeAt API endpoint allows you to retrieve the code of a smart contract that is stored at a specific address on the blockchain. The code of a smart contract is the compiled version of the contract's source code, and it is stored on the blockchain as part of the contract's data. ### Use cases: + Debugging a smart contract: if you are encountering an issue with a smart contract and you want to examine the contract's code to find the cause of the issue, you can use the /getCodeAt endpoint to retrieve the contract's code and analyze it. + Auditing a smart contract: if you want to assess the security or correctness of a smart contract, you can use the /getCodeAt endpoint to retrieve the contract's code and review it for any vulnerabilities or potential issues.
     * @param {module:model/ModelsAddressReq} input Contract Address
     * @param {module:api/MetadataApi~getCodeAtPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getCodeAt = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling getCodeAtPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/getCodeAt', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGasPricePost operation.
     * @callback module:api/MetadataApi~getGasPricePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getGasPrice
     * The /getGasPrice API endpoint allows you to retrieve the current estimated gas prices for the Ethereum blockchain. The gas price is the amount of Ether (ETH) that you need to pay per unit of gas in order to have your transaction included in the next block. ### Use cases: + Setting the gas price for a transaction. + Monitoring the gas market. + Optimizing gas usage.
     * @param {module:model/ModelsChains} input List of chains
     * @param {module:api/MetadataApi~getGasPricePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
     this.getGasPrice = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling getGasPricePost");
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/getGasPrice', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNonceAtPost operation.
     * @callback module:api/MetadataApi~getNonceAtPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getNonceAt
     * The /getNonceAt API endpoint allows you to retrieve the account nonce of a specific address on the Ethereum blockchain. The account nonce is a counter that is incremented each time a transaction is sent from an account. It helps to ensure that transactions are processed in the order that they are intended, and it prevents replay attacks. ### Use cases: + Determining the next nonce to use for a transaction. + Validating the nonce of a transaction. + Monitoring the activity of an account.
     * @param {module:model/ModelsNonceReq} input Address and Block number
     * @param {module:api/MetadataApi~getNonceAtPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getNonceAt = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling getNonceAtPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/getNonceAt', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPeerCountPost operation.
     * @callback module:api/MetadataApi~getPeerCountPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

     /**
     * getPeerCount
     * The /getPeerCount API endpoint allows you to retrieve the number of peer-to-peer (P2P) connections that are currently connected to the Ethereum blockchain. P2P connections are established between nodes on the blockchain network, and they are used to exchange information and data. ### Use cases: + Monitoring the number of P2P connections on the Ethereum network. + Displaying the number of P2P connections on a blockchain explorer. + Allowing a user to view the number of P2P connections within a decentralized application.
     * @param {module:model/ModelsChains} input List of chains
     * @param {module:api/MetadataApi~getPeerCountPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
      this.getPeerCount = function(input, callback) {
        var postBody = input;
  
        // verify the required parameter 'input' is set
        if (input === undefined || input === null) {
          throw new Error("Missing the required parameter 'input' when calling getPeerCountPost");
        }
  

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/getPeerCount', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPendingTransactionCountPost operation.
     * @callback module:api/MetadataApi~getPendingTransactionCountPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

   /**
     * getPendingTransactionCount
     * Returns the number of pending transactions in the latest block. The /getPendingTransactionCount API endpoint allows you to retrieve the number of transactions that are currently pending on the Ethereum blockchain. Pending transactions are transactions that have been broadcast to the network but have not yet been included in a block. ### Use cases: + Monitoring the number of pending transactions on the Ethereum network. + Displaying the number of pending transactions on a blockchain explorer. + Transaction throughput analysis: By tracking the number of pending transactions over time, you can get a sense of the overall transaction throughput of the Ethereum network and identify any trends or patterns that may be emerging. + Queue management: If you are building a decentralized application that relies on transactions being processed in a specific order, you can use the /getPendingTransactionCount endpoint to monitor the size of the transaction queue and adjust your strategy accordingly.
     * @param {module:model/ModelsChains} input List of chains
     * @param {module:api/MetadataApi~getPendingTransactionCountPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getPendingTransactionCount = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling getPendingTransactionCountPost");
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/getPendingTransactionCount', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getStorageAtPost operation.
     * @callback module:api/MetadataApi~getStorageAtPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getStorageAt
     * The /getStorageAt API endpoint allows you to retrieve the value of a specific key in the contract storage of a specific account on the Ethereum blockchain. Contract storage is a key-value store that is associated with each smart contract on the blockchain. It is used to persist data that is associated with the contract, and it can be accessed by calling functions on the contract or by using APIs like /getStorageAt. ### Use cases: + Retrieving data from a smart contract. + Debugging a smart contract.
     * @param {module:model/ModelsGetStorageAtReq} input Contract Address and Key
     * @param {module:api/MetadataApi~getStorageAtPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getStorageAt = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling getStorageAtPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/getStorageAt', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
