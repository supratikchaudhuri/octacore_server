/*
 * Octacore
 * Welcome to the API documentation for our blockchain data service! Our service allows users to access and query data from various blockchain networks through a set of easy-to-use API endpoints. Whether you're looking for transaction history, block information, or on-chain analytics, our API has you covered. With our API, you can retrieve data from a variety of popular blockchain networks, including ethereum and polygon mainnets . Simply make a request to the appropriate endpoint with the necessary parameters, and you'll receive a response with the requested data in a convenient JSON format. We strive to make our API as user-friendly and reliable as possible, and are constantly working to expand our coverage and capabilities. If you have any questions or need assistance getting started, please don't hesitate to reach out to us. We hope that our API will be a valuable resource for your blockchain projects.
 *
 * OpenAPI spec version: 1.0
 * Contact: contact@octacore.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.31
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ModelsAddressReq', 'model/ModelsTxReq'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ModelsAddressReq'), require('../model/ModelsTxReq'));
  } else {
    // Browser globals (root is window)
    if (!root.Octacore) {
      root.Octacore = {};
    }
    root.Octacore.ContractsApi = factory(root.Octacore.ApiClient, root.Octacore.ModelsAddressReq, root.Octacore.ModelsTxReq);
  }
}(this, function(ApiClient, ModelsAddressReq, ModelsTxReq) {
  'use strict';

  /**
   * Contracts service.
   * @module api/ContractsApi
   * @version 1.0
   */

  /**
   * Constructs a new ContractsApi. 
   * @alias module:api/ContractsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getApprovalEventsByContractAdressPost operation.
     * @callback module:api/ContractsApi~getApprovalEventsByContractAdressPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getApprovalEventsByContractAdress
     * Get Approval events emited by a given contract The /getApprovalEventsByContractAddress API endpoint allows you to retrieve all \"approval\" events emitted by a specific contract on the blockchain. An \"approval\" event is a type of event that is emitted when the allowance of an ERC20 token is set or changed by a contract or an address. ### Use cases: + Displaying the history of approval events on a blockchain explorer. + Allowing a user to view the approval events emitted by a specific contract within a decentralized application.
     * @param {module:model/ModelsTxReq} input Contract Address
     * @param {module:api/ContractsApi~getApprovalEventsByContractAdressPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getApprovalEventsByContractAdress = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling getApprovalEventsByContractAdressPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/getApprovalEventsByContractAdress', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransferEventsByContractAdressPost operation.
     * @callback module:api/ContractsApi~getTransferEventsByContractAdressPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getTransferEventsByContractAdress
     * The /getTransferEventsByContractAddress API endpoint allows you to retrieve all \"transfer\" events emitted by a specific contract on the blockchain. A \"transfer\" event is a type of event that is emitted when an ERC20 token is transferred from one address to another. ### Use cases: + Displaying the history of transfer events on a blockchain explorer. + Allowing a user to view the transfer events emitted by a specific contract within a decentralized application.
     * @param {module:model/ModelsTxReq} input Contract Address
     * @param {module:api/ContractsApi~getTransferEventsByContractAdressPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getTransferEventsByContractAdress = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling getTransferEventsByContractAdressPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/getTransferEventsByContractAdress', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the isContractPost operation.
     * @callback module:api/ContractsApi~isContractPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * isContract
     * The /isContract API endpoint allows you to check if a given address on the blockchain corresponds to a contract. ### Use cases: + Verifying if a given address is a contract on a blockchain explorer. + Allowing a user to check if a given address is a contract within a decentralized application.
     * @param {module:model/ModelsAddressReq} input Contract Address
     * @param {module:api/ContractsApi~isContractPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.isContract = function(input, callback) {
      var postBody = input;

      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling isContractPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/isContract', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
